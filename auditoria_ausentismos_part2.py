{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4af0fc74",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "print(\"=\"*80)\n",
    "print(\"PASO 1: MERGE DE AUSENTISMO CON RELACIÓN LABORAL\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "# ============================================================================\n",
    "# PARTE 1: MERGE DE ARCHIVOS\n",
    "# ============================================================================\n",
    "\n",
    "# Rutas de archivos para el merge\n",
    "csv_ausentismo = r\"C:\\Users\\jjbustos\\OneDrive - Grupo Jerónimo Martins\\Documents\\auditoria ausentismos\\archivos_salida\\ausentismo_procesado_especifico.csv\"\n",
    "excel_personal = r\"C:\\Users\\jjbustos\\OneDrive - Grupo Jerónimo Martins\\Documents\\auditoria ausentismos\\archivos_planos\\MD_26082025.XLSX\"\n",
    "carpeta_salida = r\"C:\\Users\\jjbustos\\OneDrive - Grupo Jerónimo Martins\\Documents\\auditoria ausentismos\\archivos_salida\"\n",
    "archivo_relacion_laboral = os.path.join(carpeta_salida, \"relacion_laboral.csv\")\n",
    "\n",
    "print(\"\\nLeyendo archivo de ausentismo...\")\n",
    "df_ausentismo = pd.read_csv(csv_ausentismo)\n",
    "print(f\"Registros de ausentismo: {len(df_ausentismo)}\")\n",
    "\n",
    "print(\"\\nLeyendo archivo de personal (Excel)...\")\n",
    "df_personal = pd.read_excel(excel_personal)\n",
    "print(f\"Registros de personal: {len(df_personal)}\")\n",
    "\n",
    "# Mostrar las columnas del archivo de personal para verificar\n",
    "print(\"\\nColumnas disponibles en el archivo de personal:\")\n",
    "print(df_personal.columns.tolist())\n",
    "\n",
    "# Verificar si existe la columna 'Nº pers.' o variaciones\n",
    "col_num_pers = None\n",
    "for col in df_personal.columns:\n",
    "    if 'pers' in col.lower() or 'personal' in col.lower():\n",
    "        print(f\"\\nColumna encontrada relacionada con personal: '{col}'\")\n",
    "        col_num_pers = col\n",
    "        break\n",
    "\n",
    "if col_num_pers is None:\n",
    "    print(\"\\n⚠️ ADVERTENCIA: No se encontró una columna clara para 'Nº pers.'\")\n",
    "    print(\"Por favor, verifica el nombre exacto de la columna en el Excel\")\n",
    "else:\n",
    "    # Verificar si existe la columna 'Relación laboral'\n",
    "    col_relacion = None\n",
    "    for col in df_personal.columns:\n",
    "        if 'relaci' in col.lower() and 'labor' in col.lower():\n",
    "            col_relacion = col\n",
    "            print(f\"Columna encontrada para relación laboral: '{col}'\")\n",
    "            break\n",
    "    \n",
    "    if col_relacion is None:\n",
    "        print(\"\\n⚠️ ADVERTENCIA: No se encontró la columna 'Relación laboral'\")\n",
    "        print(\"Columnas disponibles:\")\n",
    "        for col in df_personal.columns:\n",
    "            print(f\"  - {col}\")\n",
    "    else:\n",
    "        # Convertir ambas columnas a string para el merge\n",
    "        df_ausentismo['id_personal'] = df_ausentismo['id_personal'].astype(str)\n",
    "        df_personal[col_num_pers] = df_personal[col_num_pers].astype(str)\n",
    "        \n",
    "        # Seleccionar solo las columnas necesarias del archivo de personal\n",
    "        df_personal_reducido = df_personal[[col_num_pers, col_relacion]].copy()\n",
    "        \n",
    "        print(f\"\\nRealizando merge entre 'id_personal' y '{col_num_pers}'...\")\n",
    "        df_resultado = df_ausentismo.merge(\n",
    "            df_personal_reducido,\n",
    "            left_on='id_personal',\n",
    "            right_on=col_num_pers,\n",
    "            how='left'\n",
    "        )\n",
    "        \n",
    "        # Renombrar la columna de relación laboral si es necesario\n",
    "        if col_relacion != 'Relación laboral':\n",
    "            df_resultado.rename(columns={col_relacion: 'Relación laboral'}, inplace=True)\n",
    "        \n",
    "        # Eliminar la columna duplicada del merge si existe\n",
    "        if col_num_pers in df_resultado.columns and col_num_pers != 'id_personal':\n",
    "            df_resultado.drop(columns=[col_num_pers], inplace=True)\n",
    "        \n",
    "        print(f\"\\nRegistros después del merge: {len(df_resultado)}\")\n",
    "        print(f\"Registros con relación laboral: {df_resultado['Relación laboral'].notna().sum()}\")\n",
    "        print(f\"Registros sin relación laboral: {df_resultado['Relación laboral'].isna().sum()}\")\n",
    "        \n",
    "        # Eliminar registros sin relación laboral\n",
    "        print(\"\\nEliminando registros sin relación laboral...\")\n",
    "        df_resultado = df_resultado[df_resultado['Relación laboral'].notna()]\n",
    "        print(f\"Registros finales (solo con relación laboral): {len(df_resultado)}\")\n",
    "        \n",
    "        print(\"\\n✓ Proceso de merge completado exitosamente\")\n",
    "        \n",
    "        # Mostrar una muestra del resultado\n",
    "        print(\"\\nPrimeras 3 filas del resultado:\")\n",
    "        print(df_resultado[['id_personal', 'nombre_completo', 'Relación laboral']].head(3))\n",
    "        \n",
    "        # Guardar temporalmente para las validaciones\n",
    "        df_resultado.to_csv(archivo_relacion_laboral, index=False, encoding='utf-8-sig')\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"PASO 2: VALIDACIÓN SENA - GENERACIÓN DE ERRORES\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "# ============================================================================\n",
    "# PARTE 2: VALIDACIÓN SENA\n",
    "# ============================================================================\n",
    "\n",
    "archivo_sena_errores = os.path.join(carpeta_salida, \"Sena_error_validar.xlsx\")\n",
    "\n",
    "print(\"\\nLeyendo archivo con relación laboral...\")\n",
    "df = pd.read_csv(archivo_relacion_laboral, low_memory=False)\n",
    "print(f\"Total de registros: {len(df)}\")\n",
    "\n",
    "# Mostrar valores únicos de Relación laboral para debug\n",
    "print(\"\\nValores únicos encontrados en 'Relación laboral':\")\n",
    "valores_unicos = df['Relación laboral'].value_counts()\n",
    "for valor, cantidad in valores_unicos.items():\n",
    "    print(f\"  - '{valor}': {cantidad} registros\")\n",
    "\n",
    "# PASO 1: Filtrar SOLO por Relación laboral = Aprendizaje\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "print(\"FILTRANDO SOLO APRENDIZAJE...\")\n",
    "print(\"=\"*60)\n",
    "df_aprendizaje = df[df['Relación laboral'].str.contains('Aprendizaje', case=False, na=False)].copy()\n",
    "print(f\"✓ Registros con Aprendizaje encontrados: {len(df_aprendizaje)}\")\n",
    "\n",
    "if len(df_aprendizaje) == 0:\n",
    "    print(\"\\n⚠️ NO HAY REGISTROS DE APRENDIZAJE!\")\n",
    "    df_vacio = pd.DataFrame(columns=df.columns)\n",
    "    df_vacio.to_excel(archivo_sena_errores, index=False, engine='openpyxl')\n",
    "    print(f\"✓ Archivo vacío creado: {archivo_sena_errores}\")\n",
    "else:\n",
    "    # Mostrar qué conceptos tienen los aprendices\n",
    "    print(\"\\nConceptos encontrados en external_name_label para Aprendizaje:\")\n",
    "    conceptos_aprendizaje = df_aprendizaje['external_name_label'].value_counts()\n",
    "    for concepto, cantidad in conceptos_aprendizaje.items():\n",
    "        print(f\"  - {concepto}: {cantidad} registro(s)\")\n",
    "    \n",
    "    # PASO 2: Definir conceptos VÁLIDOS para SENA\n",
    "    conceptos_validos_sena = [\n",
    "        'Incapacidad gral SENA',\n",
    "        'Licencia de Maternidad SENA',\n",
    "        'Suspensión contrato SENA'\n",
    "    ]\n",
    "    \n",
    "    print(f\"\\n{'='*60}\")\n",
    "    print(f\"CONCEPTOS VÁLIDOS PARA SENA:\")\n",
    "    for concepto in conceptos_validos_sena:\n",
    "        print(f\"  ✓ {concepto}\")\n",
    "    print(f\"{'='*60}\")\n",
    "    \n",
    "    # PASO 3: Filtrar TODO lo que NO sea esos 3 conceptos = ERRORES\n",
    "    df_errores_sena = df_aprendizaje[~df_aprendizaje['external_name_label'].isin(conceptos_validos_sena)].copy()\n",
    "    \n",
    "    print(f\"\\n{'='*60}\")\n",
    "    print(f\"ERRORES ENCONTRADOS: {len(df_errores_sena)}\")\n",
    "    print(f\"{'='*60}\")\n",
    "    \n",
    "    if len(df_errores_sena) > 0:\n",
    "        # Mostrar qué errores específicos se encontraron\n",
    "        print(\"\\nCONCEPTOS INCORRECTOS (ERRORES):\")\n",
    "        conceptos_incorrectos = df_errores_sena['external_name_label'].value_counts()\n",
    "        for concepto, cantidad in conceptos_incorrectos.items():\n",
    "            print(f\"  ✗ {concepto}: {cantidad} registro(s)\")\n",
    "        \n",
    "        # GUARDAR EXCEL CON TODOS LOS ERRORES\n",
    "        print(f\"\\nGuardando Excel con errores...\")\n",
    "        df_errores_sena.to_excel(archivo_sena_errores, index=False, engine='openpyxl')\n",
    "        \n",
    "        print(f\"\\n✓✓✓ ARCHIVO CREADO EXITOSAMENTE ✓✓✓\")\n",
    "        print(f\"Ubicación: {archivo_sena_errores}\")\n",
    "        \n",
    "        # Mostrar muestra\n",
    "        print(\"\\n\" + \"=\"*60)\n",
    "        print(\"MUESTRA DE ERRORES (primeros 5):\")\n",
    "        print(\"=\"*60)\n",
    "        columnas_mostrar = ['id_personal', 'nombre_completo', 'Relación laboral', 'external_name_label']\n",
    "        print(df_errores_sena[columnas_mostrar].head().to_string(index=False))\n",
    "    else:\n",
    "        print(\"\\n✓ NO HAY ERRORES - Todos los Aprendizaje tienen conceptos válidos\")\n",
    "        df_vacio = pd.DataFrame(columns=df_aprendizaje.columns)\n",
    "        df_vacio.to_excel(archivo_sena_errores, index=False, engine='openpyxl')\n",
    "        print(f\"✓ Archivo vacío creado: {archivo_sena_errores}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"PASO 3: VALIDACIÓN LEY 50 - GENERACIÓN DE ERRORES\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "# ============================================================================\n",
    "# PARTE 3: VALIDACIÓN LEY 50\n",
    "# ============================================================================\n",
    "\n",
    "archivo_ley50_errores = os.path.join(carpeta_salida, \"Ley_50_error_validar.xlsx\")\n",
    "\n",
    "# Filtrar SOLO por Relación laboral = Ley 50\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "print(\"FILTRANDO SOLO LEY 50...\")\n",
    "print(\"=\"*60)\n",
    "df_ley50 = df[df['Relación laboral'].str.contains('Ley 50', case=False, na=False)].copy()\n",
    "print(f\"✓ Registros con Ley 50 encontrados: {len(df_ley50)}\")\n",
    "\n",
    "if len(df_ley50) == 0:\n",
    "    print(\"\\n⚠️ NO HAY REGISTROS DE LEY 50!\")\n",
    "    df_vacio = pd.DataFrame(columns=df.columns)\n",
    "    df_vacio.to_excel(archivo_ley50_errores, index=False, engine='openpyxl')\n",
    "    print(f\"✓ Archivo vacío creado: {archivo_ley50_errores}\")\n",
    "else:\n",
    "    # Definir conceptos PROHIBIDOS para Ley 50\n",
    "    conceptos_prohibidos_ley50 = [\n",
    "        'Incapacidad gral SENA',\n",
    "        'Licencia de Maternidad SENA',\n",
    "        'Suspensión contrato SENA',\n",
    "        'Inca. Enfer Gral Integral',\n",
    "        'Prorr Inc/Enf Gral ntegra'\n",
    "    ]\n",
    "    \n",
    "    print(f\"\\n{'='*60}\")\n",
    "    print(f\"CONCEPTOS PROHIBIDOS PARA LEY 50:\")\n",
    "    for concepto in conceptos_prohibidos_ley50:\n",
    "        print(f\"  ✗ {concepto}\")\n",
    "    print(f\"{'='*60}\")\n",
    "    \n",
    "    # Filtrar los que SÍ tienen esos conceptos = ERRORES\n",
    "    df_errores_ley50 = df_ley50[df_ley50['external_name_label'].isin(conceptos_prohibidos_ley50)].copy()\n",
    "    \n",
    "    print(f\"\\n{'='*60}\")\n",
    "    print(f\"ERRORES ENCONTRADOS: {len(df_errores_ley50)}\")\n",
    "    print(f\"{'='*60}\")\n",
    "    \n",
    "    if len(df_errores_ley50) > 0:\n",
    "        # Mostrar qué errores específicos se encontraron\n",
    "        print(\"\\nCONCEPTOS PROHIBIDOS ENCONTRADOS (ERRORES):\")\n",
    "        conceptos_encontrados = df_errores_ley50['external_name_label'].value_counts()\n",
    "        for concepto, cantidad in conceptos_encontrados.items():\n",
    "            print(f\"  ✗ {concepto}: {cantidad} registro(s)\")\n",
    "        \n",
    "        # GUARDAR EXCEL CON TODOS LOS ERRORES\n",
    "        print(f\"\\nGuardando Excel con errores...\")\n",
    "        df_errores_ley50.to_excel(archivo_ley50_errores, index=False, engine='openpyxl')\n",
    "        \n",
    "        print(f\"\\n✓✓✓ ARCHIVO CREADO EXITOSAMENTE ✓✓✓\")\n",
    "        print(f\"Ubicación: {archivo_ley50_errores}\")\n",
    "        \n",
    "        # Mostrar muestra\n",
    "        print(\"\\n\" + \"=\"*60)\n",
    "        print(\"MUESTRA DE ERRORES (primeros 5):\")\n",
    "        print(\"=\"*60)\n",
    "        columnas_mostrar = ['id_personal', 'nombre_completo', 'Relación laboral', 'external_name_label']\n",
    "        print(df_errores_ley50[columnas_mostrar].head().to_string(index=False))\n",
    "    else:\n",
    "        print(\"\\n✓ NO HAY ERRORES - Ningún registro de Ley 50 tiene conceptos prohibidos\")\n",
    "        df_vacio = pd.DataFrame(columns=df_ley50.columns)\n",
    "        df_vacio.to_excel(archivo_ley50_errores, index=False, engine='openpyxl')\n",
    "        print(f\"✓ Archivo vacío creado: {archivo_ley50_errores}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"PASO 4: CREACIÓN DE COLUMNAS DE VALIDACIÓN\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "# ============================================================================\n",
    "# PARTE 4: CREAR COLUMNAS DE VALIDACIÓN\n",
    "# ============================================================================\n",
    "\n",
    "archivo_con_validaciones = os.path.join(carpeta_salida, \"relacion_laboral_con_validaciones.csv\")\n",
    "\n",
    "print(\"\\nCreando columnas de validación...\")\n",
    "\n",
    "# COLUMNA 1: licencia_paternidad\n",
    "print(\"\\n1. Creando columna licencia_paternidad...\")\n",
    "df['licencia_paternidad'] = df.apply(\n",
    "    lambda row: \"Concepto Si Aplica\" \n",
    "    if row['external_name_label'] == \"Licencia Paternidad\" and row['calendar_days'] == 14 \n",
    "    else \"Concepto No Aplica\",\n",
    "    axis=1\n",
    ")\n",
    "print(f\"   ✓ Columna creada\")\n",
    "print(f\"   - Concepto Si Aplica: {(df['licencia_paternidad'] == 'Concepto Si Aplica').sum()}\")\n",
    "print(f\"   - Concepto No Aplica: {(df['licencia_paternidad'] == 'Concepto No Aplica').sum()}\")\n",
    "\n",
    "# COLUMNA 2: licencia_maternidad\n",
    "print(\"\\n2. Creando columna licencia_maternidad...\")\n",
    "df['licencia_maternidad'] = df.apply(\n",
    "    lambda row: \"Concepto Si Aplica\" \n",
    "    if row['external_name_label'] == \"Licencia Maternidad\" and row['calendar_days'] == 126 \n",
    "    else \"Concepto No Aplica\",\n",
    "    axis=1\n",
    ")\n",
    "print(f\"   ✓ Columna creada\")\n",
    "print(f\"   - Concepto Si Aplica: {(df['licencia_maternidad'] == 'Concepto Si Aplica').sum()}\")\n",
    "print(f\"   - Concepto No Aplica: {(df['licencia_maternidad'] == 'Concepto No Aplica').sum()}\")\n",
    "\n",
    "# COLUMNA 3: ley_de_luto (USA quantity_in_days)\n",
    "print(\"\\n3. Creando columna ley_de_luto...\")\n",
    "df['ley_de_luto'] = df.apply(\n",
    "    lambda row: \"Concepto Si Aplica\" \n",
    "    if row['external_name_label'] == \"Ley de luto\" and row['quantity_in_days'] == 5 \n",
    "    else \"Concepto No Aplica\",\n",
    "    axis=1\n",
    ")\n",
    "print(f\"   ✓ Columna creada\")\n",
    "print(f\"   - Concepto Si Aplica: {(df['ley_de_luto'] == 'Concepto Si Aplica').sum()}\")\n",
    "print(f\"   - Concepto No Aplica: {(df['ley_de_luto'] == 'Concepto No Aplica').sum()}\")\n",
    "\n",
    "# COLUMNA 4: incap_fuera_de_turno\n",
    "print(\"\\n4. Creando columna incap_fuera_de_turno...\")\n",
    "df['incap_fuera_de_turno'] = df.apply(\n",
    "    lambda row: \"Concepto Si Aplica\" \n",
    "    if row['external_name_label'] == \"Incapa.fuera de turno\" and row['calendar_days'] <= 1 \n",
    "    else \"Concepto No Aplica\",\n",
    "    axis=1\n",
    ")\n",
    "print(f\"   ✓ Columna creada\")\n",
    "print(f\"   - Concepto Si Aplica: {(df['incap_fuera_de_turno'] == 'Concepto Si Aplica').sum()}\")\n",
    "print(f\"   - Concepto No Aplica: {(df['incap_fuera_de_turno'] == 'Concepto No Aplica').sum()}\")\n",
    "\n",
    "# COLUMNA 5: lic_maternidad_sena\n",
    "print(\"\\n5. Creando columna lic_maternidad_sena...\")\n",
    "df['lic_maternidad_sena'] = df.apply(\n",
    "    lambda row: \"Concepto Si Aplica\" \n",
    "    if row['external_name_label'] == \"Licencia de Maternidad SENA\" and row['calendar_days'] == 126 \n",
    "    else \"Concepto No Aplica\",\n",
    "    axis=1\n",
    ")\n",
    "print(f\"   ✓ Columna creada\")\n",
    "print(f\"   - Concepto Si Aplica: {(df['lic_maternidad_sena'] == 'Concepto Si Aplica').sum()}\")\n",
    "print(f\"   - Concepto No Aplica: {(df['lic_maternidad_sena'] == 'Concepto No Aplica').sum()}\")\n",
    "\n",
    "# COLUMNA 6: lic_jurado_votacion\n",
    "print(\"\\n6. Creando columna lic_jurado_votacion...\")\n",
    "df['lic_jurado_votacion'] = df.apply(\n",
    "    lambda row: \"Concepto Si Aplica\" \n",
    "    if row['external_name_label'] == \"Lic Jurado Votación\" and row['calendar_days'] <= 1 \n",
    "    else \"Concepto No Aplica\",\n",
    "    axis=1\n",
    ")\n",
    "print(f\"   ✓ Columna creada\")\n",
    "print(f\"   - Concepto Si Aplica: {(df['lic_jurado_votacion'] == 'Concepto Si Aplica').sum()}\")\n",
    "print(f\"   - Concepto No Aplica: {(df['lic_jurado_votacion'] == 'Concepto No Aplica').sum()}\")\n",
    "\n",
    "# Guardar el archivo con las nuevas columnas\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"GUARDANDO ARCHIVO CON VALIDACIONES...\")\n",
    "print(\"=\"*80)\n",
    "df.to_csv(archivo_con_validaciones, index=False, encoding='utf-8-sig')\n",
    "print(f\"\\n✓✓✓ ARCHIVO GUARDADO EXITOSAMENTE ✓✓✓\")\n",
    "print(f\"Ubicación: {archivo_con_validaciones}\")\n",
    "\n",
    "# Eliminar el archivo temporal relacion_laboral.csv\n",
    "if os.path.exists(archivo_relacion_laboral):\n",
    "    os.remove(archivo_relacion_laboral)\n",
    "    print(f\"\\n✓ Archivo temporal eliminado: relacion_laboral.csv\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"PASO 5: GENERANDO EXCELES DE ALERTAS POR COLUMNA\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "# ============================================================================\n",
    "# PARTE 5: GENERAR EXCELES DE ALERTAS\n",
    "# ============================================================================\n",
    "\n",
    "# Excel 1: Alertas de licencia_paternidad\n",
    "print(\"\\n1. Generando Excel de alertas: licencia_paternidad...\")\n",
    "df_alert_paternidad = df[(df['licencia_paternidad'] == 'Concepto No Aplica') & \n",
    "                         (df['external_name_label'] == 'Licencia Paternidad')].copy()\n",
    "if len(df_alert_paternidad) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"alerta_licencia_paternidad.xlsx\")\n",
    "    df_alert_paternidad.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_alert_paternidad)} alertas encontradas → {archivo_alert}\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (todos los registros de Licencia Paternidad tienen 14 días)\")\n",
    "\n",
    "# Excel 2: Alertas de licencia_maternidad\n",
    "print(\"\\n2. Generando Excel de alertas: licencia_maternidad...\")\n",
    "df_alert_maternidad = df[(df['licencia_maternidad'] == 'Concepto No Aplica') & \n",
    "                         (df['external_name_label'] == 'Licencia Maternidad')].copy()\n",
    "if len(df_alert_maternidad) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"alerta_licencia_maternidad.xlsx\")\n",
    "    df_alert_maternidad.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_alert_maternidad)} alertas encontradas → {archivo_alert}\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (todos los registros de Licencia Maternidad tienen 126 días)\")\n",
    "\n",
    "# Excel 3: Alertas de ley_de_luto\n",
    "print(\"\\n3. Generando Excel de alertas: ley_de_luto...\")\n",
    "df_alert_luto = df[(df['ley_de_luto'] == 'Concepto No Aplica') & \n",
    "                   (df['external_name_label'] == 'Ley de luto')].copy()\n",
    "if len(df_alert_luto) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"alerta_ley_de_luto.xlsx\")\n",
    "    df_alert_luto.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_alert_luto)} alertas encontradas → {archivo_alert}\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (todos los registros de Ley de luto tienen 5 días)\")\n",
    "\n",
    "# Excel 4: Alertas de incap_fuera_de_turno\n",
    "print(\"\\n4. Generando Excel de alertas: incap_fuera_de_turno...\")\n",
    "df_alert_incap = df[(df['incap_fuera_de_turno'] == 'Concepto No Aplica') & \n",
    "                    (df['external_name_label'] == 'Incapa.fuera de turno')].copy()\n",
    "if len(df_alert_incap) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"alerta_incap_fuera_de_turno.xlsx\")\n",
    "    df_alert_incap.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_alert_incap)} alertas encontradas → {archivo_alert}\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (todos los registros de Incapa.fuera de turno tienen <=1 día)\")\n",
    "\n",
    "# Excel 5: Alertas de lic_maternidad_sena\n",
    "print(\"\\n5. Generando Excel de alertas: lic_maternidad_sena...\")\n",
    "df_alert_mat_sena = df[(df['lic_maternidad_sena'] == 'Concepto No Aplica') & \n",
    "                       (df['external_name_label'] == 'Licencia de Maternidad SENA')].copy()\n",
    "if len(df_alert_mat_sena) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"alerta_lic_maternidad_sena.xlsx\")\n",
    "    df_alert_mat_sena.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_alert_mat_sena)} alertas encontradas → {archivo_alert}\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (todos los registros de Licencia de Maternidad SENA tienen 126 días)\")\n",
    "\n",
    "# Excel 6: Alertas de lic_jurado_votacion\n",
    "print(\"\\n6. Generando Excel de alertas: lic_jurado_votacion...\")\n",
    "df_alert_jurado = df[(df['lic_jurado_votacion'] == 'Concepto No Aplica') & \n",
    "                     (df['external_name_label'] == 'Lic Jurado Votación')].copy()\n",
    "if len(df_alert_jurado) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"alerta_lic_jurado_votacion.xlsx\")\n",
    "    df_alert_jurado.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_alert_jurado)} alertas encontradas → {archivo_alert}\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (todos los registros de Lic Jurado Votación tienen <=1 día)\")\n",
    "\n",
    "# Excel 7: Incapacidades mayores a 30 días\n",
    "print(\"\\n7. Generando Excel de alertas: incp_mayor_30_dias...\")\n",
    "conceptos_incapacidad = [\n",
    "    'Incapacidad enfermedad general',\n",
    "    'Prorroga Inca/Enfer Gene',\n",
    "    'Enf Gral SOAT',\n",
    "    'Inc. Accidente de Trabajo',\n",
    "    'Prorroga Inc. Accid. Trab'\n",
    "]\n",
    "df_incap_mayor_30 = df[\n",
    "    (df['external_name_label'].isin(conceptos_incapacidad)) & \n",
    "    (df['calendar_days'] > 30)\n",
    "].copy()\n",
    "if len(df_incap_mayor_30) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"incp_mayor_30_dias.xlsx\")\n",
    "    df_incap_mayor_30.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_incap_mayor_30)} alertas encontradas → {archivo_alert}\")\n",
    "    print(f\"   Conceptos encontrados:\")\n",
    "    conceptos_encontrados = df_incap_mayor_30['external_name_label'].value_counts()\n",
    "    for concepto, cantidad in conceptos_encontrados.items():\n",
    "        print(f\"     - {concepto}: {cantidad} registro(s)\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (ninguna incapacidad tiene más de 30 días)\")\n",
    "\n",
    "# Excel 8: Ausentismos sin pago mayores a 10 días\n",
    "print(\"\\n8. Generando Excel de alertas: Validación ausentismos sin pago > 10 días...\")\n",
    "conceptos_sin_pago = [\n",
    "    'Aus Reg sin Soporte',\n",
    "    'Suspensión'\n",
    "]\n",
    "df_sin_pago_mayor_10 = df[\n",
    "    (df['external_name_label'].isin(conceptos_sin_pago)) & \n",
    "    (df['calendar_days'] > 10)\n",
    "].copy()\n",
    "if len(df_sin_pago_mayor_10) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"Validacion_ausentismos_sin_pago_mayor_10_dias.xlsx\")\n",
    "    df_sin_pago_mayor_10.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_sin_pago_mayor_10)} alertas encontradas → {archivo_alert}\")\n",
    "    print(f\"   Conceptos encontrados:\")\n",
    "    conceptos_encontrados = df_sin_pago_mayor_10['external_name_label'].value_counts()\n",
    "    for concepto, cantidad in conceptos_encontrados.items():\n",
    "        print(f\"     - {concepto}: {cantidad} registro(s)\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (ningún ausentismo sin pago tiene más de 10 días)\")\n",
    "\n",
    "# Excel 9: Día de la familia mayor de 1 día\n",
    "print(\"\\n9. Generando Excel de alertas: dia_de_la_familia...\")\n",
    "df_dia_familia = df[\n",
    "    (df['external_name_label'] == 'Día de la familia') & \n",
    "    (df['calendar_days'] > 1)\n",
    "].copy()\n",
    "if len(df_dia_familia) > 0:\n",
    "    archivo_alert = os.path.join(carpeta_salida, \"dia_de_la_familia.xlsx\")\n",
    "    df_dia_familia.to_excel(archivo_alert, index=False, engine='openpyxl')\n",
    "    print(f\"   ✓ {len(df_dia_familia)} alertas encontradas → {archivo_alert}\")\n",
    "else:\n",
    "    print(f\"   ✓ 0 alertas (ningún Día de la familia tiene > 1 día)\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"RESUMEN FINAL DE TODOS LOS PROCESOS\")\n",
    "print(\"=\"*80)\n",
    "print(f\"\\nArchivos principales generados:\")\n",
    "print(f\"  1. {archivo_con_validaciones}\")\n",
    "print(f\"  2. {archivo_sena_errores}\")\n",
    "print(f\"  3. {archivo_ley50_errores}\")\n",
    "print(f\"\\nArchivos de alertas por columna (si hay errores):\")\n",
    "print(f\"  4. alerta_licencia_paternidad.xlsx\")\n",
    "print(f\"  5. alerta_licencia_maternidad.xlsx\")\n",
    "print(f\"  6. alerta_ley_de_luto.xlsx\")\n",
    "print(f\"  7. alerta_incap_fuera_de_turno.xlsx\")\n",
    "print(f\"  8. alerta_lic_maternidad_sena.xlsx\")\n",
    "print(f\"  9. alerta_lic_jurado_votacion.xlsx\")\n",
    "print(\"\\nEstadísticas:\")\n",
    "print(f\"  - Total registros con relación laboral: {len(df)}\")\n",
    "print(f\"\\n  APRENDIZAJE:\")\n",
    "print(f\"    - Registros: {len(df_aprendizaje)}\")\n",
    "if len(df_aprendizaje) > 0:\n",
    "    print(f\"    - Errores encontrados: {len(df_errores_sena)}\")\n",
    "print(f\"\\n  LEY 50:\")\n",
    "print(f\"    - Registros: {len(df_ley50)}\")\n",
    "if len(df_ley50) > 0:\n",
    "    print(f\"    - Errores encontrados: {len(df_errores_ley50)}\")\n",
    "print(\"\\n  COLUMNAS DE VALIDACIÓN CREADAS: 6\")\n",
    "print(\"=\"*80)\n",
    "print(f\"\\n✓✓✓ TODOS LOS ARCHIVOS CREADOS EN: {carpeta_salida} ✓✓✓\")\n",
    "print(\"=\"*80)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "jeysshon_gpu",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
